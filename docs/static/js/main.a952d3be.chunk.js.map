{"version":3,"sources":["Map.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Map","polygon","markerIcon","L","icon","iconUrl","markerIconImg","iconRetinaUrl","iconAnchor","popupAnchor","iconSize","className","MapContainer","center","zoom","style","height","zoomControl","crs","CRS","EPSG3857","continuousWorld","worldCopyJump","TileLayer","url","Polygon","color","positions","Polyline","Marker","position","Popup","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kUAiFeA,EAxEH,WAEV,IAGMC,EAA8B,CAClC,CAAC,kBAAkB,oBACnB,CAAC,kBAAkB,mBACnB,CAAC,kBAAkB,mBACnB,CAAC,mBAAmB,kBACpB,CAAC,mBAAmB,mBACpB,CAAC,kBAAkB,mBACnB,CAAC,kBAAkB,mBACnB,CAAC,kBAAkB,kBACnB,CAAC,mBAAmB,oBACpB,CAAC,kBAAkB,mBACnB,CAAC,kBAAkB,mBACnB,CAAC,kBAAkB,mBACnB,CAAC,kBAAkB,mBACnB,CAAC,mBAAmB,mBACpB,CAAC,iBAAiB,mBAClB,CAAC,kBAAkB,mBACnB,CAAC,mBAAmB,mBACpB,CAAC,kBAAkB,qBAejBC,EAAaC,IAAEC,KAAK,CACtBC,QAASC,IACTC,cAAeD,IACfE,WAAY,CAAC,GAAI,IACjBC,YAAa,CAAC,GAAG,IACjBC,SAAU,CAAC,GAAI,MAGjB,OACE,qBAAKC,UAAU,iBAAf,SACE,eAACC,EAAA,EAAD,CACEC,OA/CoC,CAAC,SAAU,SAgD/CC,KAAM,GACNC,MAAO,CAAEC,OAAQ,SACjBC,aAAa,EACbC,IAAKf,IAAEgB,IAAIC,SACXC,iBAAiB,EACjBC,eAAe,EAPjB,UASE,cAACC,EAAA,EAAD,CACEC,IAvDE,0GAyDJ,cAACC,EAAA,EAAD,CAASC,MAAM,SAASC,UAAW1B,IACnC,cAAC2B,EAAA,EAAD,CAAUF,MAAM,OAAOC,UAnCQ,CACnC,CAAC,kBAAkB,mBACnB,CAAC,kBAAkB,oBACnB,CAAC,kBAAkB,mBACnB,CAAC,kBAAkB,mBACnB,CAAC,kBAAkB,mBACnB,CAAC,kBAAkB,mBACnB,CAAC,kBAAkB,mBACnB,CAAC,mBAAmB,kBACpB,CAAC,kBAAkB,sBA2Bf,cAACE,EAAA,EAAD,CAAQC,SAAU7B,EAAQ,GAAIG,KAAMF,EAApC,SACE,cAAC6B,EAAA,EAAD,iCCzDKC,MAVf,WACE,OACE,mCACE,+BACE,cAAC,EAAD,SCKOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a952d3be.chunk.js","sourcesContent":["\nimport React from \"react\";\nimport L, { LatLngExpression } from \"leaflet\";\nimport { MapContainer, TileLayer, Polygon, Polyline, Marker, Popup } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport markerIconImg from \"leaflet/dist/images/marker-icon.png\"\n\nimport \"./Map.css\";\n\nconst Map = () => {\n  \n  const defaultPosition: LatLngExpression = [46.96601, 7.41143]; // Bremgartenwald\n  var url = 'https://wmts20.geo.admin.ch/1.0.0/ch.swisstopo.pixelkarte-farbe/default/current/3857/{z}/{x}/{y}.jpeg';\n\n  const polygon: LatLngExpression[] = [\n    [46.97100503555501,7.4181321127277515],\n    [46.96979094171849,7.419512371488337],\n    [46.96785700895023,7.419644496984791],\n    [46.965922852670616,7.41852833652381],\n    [46.964213421419515,7.416689500278139],\n    [46.96259434637023,7.416952969612274],\n    [46.96209967737944,7.417281648594689],\n    [46.96200938047555,7.41557364277021],\n    [46.962323780689886,7.4136026713385546],\n    [46.96187355894224,7.411632074973777],\n    [46.96542487137728,7.405126107969477],\n    [46.96560451418053,7.404271913719851],\n    [46.96654749426737,7.399672325949166],\n    [46.968661669948794,7.400590583472943],\n    [46.9682142539397,7.408212291033252],\n    [46.96951967075658,7.412613640319248],\n    [46.970329694939714,7.414650062218596],\n    [46.97100503555501,7.4181321127277515]\n  ];\n\n  const polyline: LatLngExpression[] = [\n    [46.96203225193723,7.417478758616334],\n    [46.96322362173851,7.4150803836623025],\n    [46.96576499176308,7.416228948458388],\n    [46.96877846486095,7.416720404084648],\n    [46.96347081701836,7.414291921650181],\n    [46.96398798718615,7.414061740569083],\n    [46.96909314153159,7.415964689608403],\n    [46.968395817537875,7.41501232049818],\n    [46.96801340996167,7.414486884977604]\n  ];\n\n  var markerIcon = L.icon({\n    iconUrl: markerIconImg,\n    iconRetinaUrl: markerIconImg,\n    iconAnchor: [16, 32],\n    popupAnchor: [0,-32],\n    iconSize: [32, 32],\n});\n  \n  return (\n    <div className=\"map__container\">\n      <MapContainer\n        center={defaultPosition}\n        zoom={14}\n        style={{ height: \"100vh\"/*, filter: \"contrast(50%)\"*/}}\n        zoomControl={false}\n        crs={L.CRS.EPSG3857}\n        continuousWorld={true}\n        worldCopyJump={false}\n      >\n        <TileLayer\n          url={url}\n        />\n        <Polygon color=\"purple\" positions={polygon}/>\n        <Polyline color=\"lime\" positions={polyline} />\n        <Marker position={polygon[6]} icon={markerIcon}>\n          <Popup>\n              Treffpunkt \n          </Popup>\n        </Marker>\n      </MapContainer>\n    </div>\n  );\n};\n\nexport default Map;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Map from \"./Map\";\n\nfunction App() {\n  return (\n    <>\n      <main>\n        <Map />\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}